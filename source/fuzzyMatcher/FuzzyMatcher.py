import logging
logging.basicConfig(level=logging.DEBUG)
import fuzzymatcher
import pandas as pd
import pdb

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', -1)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

def test_fuzzy_left_join():

	df_left = pd.read_csv("tests/data/left_1.csv")
	print(df_left, '\n')

	df_right = pd.read_csv("tests/data/right_1.csv")
	print(df_right, '\n')

	# Columns to match on from df_left
	left_on = ["fname", "mname", "lname",  "dob"]

	# Columns to match on from df_right
	right_on = ["name", "middlename", "surname", "date"]

	# Note that if left_id_col or right_id_col are admitted a unique id will be autogenerated
	print(fuzzymatcher.link_table(df_left, df_right, left_on, right_on, left_id_col = "id", right_id_col = "id"), '\n')

	# Automatically links the two dataframes based on the highest-scoring match.
	df = fuzzymatcher.fuzzy_left_join(df_left, df_right, left_on, right_on)
	print(df, '\n')

	#df.to_csv ('tests/data/test_OKAMI.csv', index = False, header=True)

def test_fuzzy_left_join2():
	ons = pd.read_csv("../../data/restaurants/grouped_by_restaurant/ActiveDiner.txt", sep='\t')
	os = pd.read_csv("../../data/restaurants/grouped_by_restaurant/DiningGuide.txt", sep='\t')

		# Columns to match on from df_left
	left_on = ["Ristorante", "Indirizzo"]

	# Columns to match on from df_right
	right_on = ["Ristorante2", "Indirizzo2"]

	df_joined = fuzzymatcher.fuzzy_left_join(ons, os, left_on = left_on, right_on = right_on)

	df_joined.to_csv('test_OKAMI.csv', header=True, sep=";", decimal=',', float_format='%.3f')
	pdb.set_trace()

	rename = {"lad16cd": "ons_code", "code": "os_code", "lad16nm": "ons_name", "name": "os_name"}
	df_joined = df_joined.rename(columns=rename)
	col_order = ["best_match_score", "ons_name", "os_name", "ons_code", "os_code"]
	print(df_joined)
	print(df_joined[col_order])
	#print(df_joined[col_order].sample(5))

	num_records = len(df_joined)
	correct_binary = (df_joined["ons_code"] == df_joined["os_code"])
	perc_correct = correct_binary.sum()/num_records

	"The percentage of codes which were correctly matched was {:,.1f}%".format(perc_correct*100)

if __name__ == "__main__":
	#test_fuzzy_left_join()
	test_fuzzy_left_join2()